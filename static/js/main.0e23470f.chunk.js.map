{"version":3,"sources":["assets/cat.png","Card.jsx","CardList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Card","props","useState","clicked","state","setState","cardList","cardDescription","cardName","cardWith","cardConsist","cardWeight","cardBuy","cardBuyLink","cardContent","cardClassName","className","classnames","onClick","e","target","currentTarget","console","log","classList","contains","addEventListener","once","map","elem","index","key","src","cat","alt","href","id","CardList","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0e23470f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat.0a5db29f.png\";","import React, {useState} from 'react';\r\nimport cat from \"./assets/cat.png\";\r\nimport classnames from \"classnames\";\r\nimport \"./Card.scss\";\r\n\r\nexport function Card(props, {}) {\r\n    const [state, setState] = useState({\r\n        clicked: false\r\n    })\r\n    const handleClick = (e) => {\r\n        const target = e.currentTarget;\r\n        console.log(e.currentTarget, e.target);\r\n        if (!e.target.classList.contains('card__item_bottom')){\r\n            target.addEventListener('mouseover', () => {\r\n                setState({...state, clicked: !state.clicked})\r\n            }, {once: true})\r\n        }\r\n      };\r\n    const {cardDescription,\r\n        cardName,\r\n        cardWith,\r\n        cardConsist,\r\n        cardWeight,\r\n        cardBuy,\r\n        cardBuyLink,\r\n        cardContent,\r\n        cardClassName\r\n        } = props.cardList;\r\n    return (\r\n                <div className={classnames(\"card__item\", state.clicked && cardClassName)} onClick={handleClick}>\r\n                  <div className=\"card__item_wrap\">\r\n                    <div className=\"card__item_content\">\r\n                      <div className=\"card__item_description\">\r\n                        {cardDescription}\r\n                      </div>\r\n                      <div className=\"card__item_name\">{cardName}</div>\r\n                      <div className=\"card__item_with\">{cardWith}</div>\r\n                      <div className=\"card__item_consist\">\r\n                        {cardConsist.map((elem, index) => (\r\n                          <p className=\"card__item_consist_content\" key={index}>\r\n                            {elem}\r\n                          </p>\r\n                        ))}\r\n                      </div>\r\n                      <div className=\"card__item_weight\">\r\n                        <p className=\"card__item_weight_number\">{cardWeight}</p>\r\n                        <p className=\"card__item_weight_text\">кг</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"card__item_img\">\r\n                      <img src={cat} alt=\"cat\" />\r\n                    </div>\r\n                  </div>\r\n                  {\r\n                    !state.clicked ?\r\n                    <div className=\"card__item_bottom\">\r\n                      {cardBuy}{\" \"}\r\n                      {cardBuyLink && (\r\n                        <a href=\"#\" className=\"card__item_bottom_link\">\r\n                          {cardBuyLink}\r\n                        </a>\r\n                      )}\r\n                    </div> :\r\n                    <div className=\"card__item_bottom\">\r\n                      {cardContent}\r\n                    </div>\r\n                  }\r\n                </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./CardList.scss\";\r\nimport Card from './Card'\r\n\r\n\r\nconst cardList = [\r\n  {\r\n    cardDescription: \"Сказочное заморское яство\",\r\n    cardName: \"Нямушка\",\r\n    cardWith: \"с фуа-гра\",\r\n    cardConsist: [\"10 порций\", \"мышь в подарок\"],\r\n    cardWeight: \"0,5\",\r\n    cardBuy: \"Чего сидишь? Порадуй котэ,\",\r\n    cardBuyLink: \"купи.\",\r\n    cardContent: \"Печень утки разварная с артишоками.\",\r\n    cardClassName: \"card__item-active\",\r\n    id: 1,\r\n  },\r\n  {\r\n    cardDescription: \"Сказочное заморское яство\",\r\n    cardName: \"Нямушка\",\r\n    cardWith: \"с рыбой\",\r\n    cardConsist: [\"40 порций\", \"2 мыши в подарок\"],\r\n    cardWeight: \"2\",\r\n    cardBuy: \"Чего сидишь? Порадуй котэ,\",\r\n    cardBuyLink: \"купи.\",\r\n    cardContent: \"Головы щучьи с чесноком да свежайшая сёмгушка.\",\r\n    cardClassName: \"card__item-active\",\r\n    id: 2,\r\n  },\r\n  {\r\n    cardDescription: \"Сказочное заморское яство\",\r\n    cardName: \"Нямушка\",\r\n    cardWith: \"с курой\",\r\n    cardConsist: [\"100 порций\", \"5 мышей в подарок\", \"заказчик доволен\"],\r\n    cardWeight: \"5\",\r\n    cardBuy: \"Чего сидишь? Порадуй котэ,\",\r\n    cardBuyLink: \"купи.\",\r\n    cardContent: \"Печалька, с курой закончился.\",\r\n    cardClassName: \"card__item-disabled\",\r\n    id: 3,\r\n  },\r\n];\r\n\r\nexport function CardList() {\r\n  return (\r\n    <div className=\"cards\">\r\n      <h2 className=\"cards__title\">Ты&nbsp;сегодня покормил кота?</h2>\r\n      <div className=\"cards__list card\">\r\n        {cardList.map(\r\n          ({\r\n            cardDescription,\r\n            cardName,\r\n            cardWith,\r\n            cardConsist,\r\n            cardWeight,\r\n            cardBuy,\r\n            cardBuyLink,\r\n            cardContent,\r\n            cardClassName,\r\n            id,\r\n          }) => (\r\n            <Card key={id}cardList={{cardDescription,\r\n              cardName,\r\n              cardWith,\r\n              cardConsist,\r\n              cardWeight,\r\n              cardBuy,\r\n              cardBuyLink,\r\n              cardContent,\r\n              cardClassName\r\n              }}/>\r\n          )\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport CardList from \"./CardList\";\r\nimport \"./App.scss\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"wrap\">\r\n      <CardList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'normalize.css';\r\nimport './assets/fonts/fonts.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}